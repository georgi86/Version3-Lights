///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Lights
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording1 recording.
    /// </summary>
    [TestModule("7261d289-f73d-4bca-be23-7002babd5aa9", ModuleType.Recording, 1)]
    public partial class Recording1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the LightsRepository repository.
        /// </summary>
        public static LightsRepository repo = LightsRepository.Instance;

        static Recording1 instance = new Recording1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording1()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording1 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();


            // the following code (from line 85 to line 106) was writen to avoid the issue in case in which the automation test is execute from FFW instead of Big Mode 

            string strBigModeCaptionText = "Measure";
            bool bBigMode = false;

            try
            {
                Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SnapXUntitled.TextMeasure' at Center.", repo.SnapXUntitled.TextMeasureInfo, new RecordItemIndex(0));
                repo.SnapXUntitled.TextMeasure.MoveTo();
                Delay.Milliseconds(200);

                bBigMode = (repo.SnapXUntitled.TextMeasure.TextValue.CompareTo(strBigModeCaptionText) == 0) && repo.SnapXUntitled.TextMeasure.Visible;

            }
            catch (Exception ex)
            {
                
            }

            if (!bBigMode)
            {
                repo.SnapXUntitled.SwitchToSensor.Click();
                Delay.Milliseconds(200);
            }


            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.TitleBar' at Center.", repo.SnapXUntitled.TitleBarInfo, new RecordItemIndex(1));
            repo.SnapXUntitled.TitleBar.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.BackLightBig' at 13;15.", repo.SnapXUntitled.BackLightBigInfo, new RecordItemIndex(2));
            repo.SnapXUntitled.BackLightBig.DoubleClick("13;15");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '70'.", new RecordItemIndex(3));
            Keyboard.Press("70");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(4));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            try
            {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (WindowText='70') on item 'SnapXUntitled.BackLightBig'.", repo.SnapXUntitled.BackLightBigInfo, new RecordItemIndex(5));
                Validate.Attribute(repo.SnapXUntitled.BackLightBigInfo, "WindowText", "70", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5));
            }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToFFW' at Center.", repo.SnapXUntitled.SwitchToFFWInfo, new RecordItemIndex(6));
            repo.SnapXUntitled.SwitchToFFW.Click();
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='70') on item 'SnapXUntitled.BackLightFFW'.", repo.SnapXUntitled.BackLightFFWInfo, new RecordItemIndex(7));
                Validate.Attribute(repo.SnapXUntitled.BackLightFFWInfo, "WindowText", "70");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7));
            }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.BackLightFFW' at 10;10.", repo.SnapXUntitled.BackLightFFWInfo, new RecordItemIndex(8));
            repo.SnapXUntitled.BackLightFFW.DoubleClick("10;10");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '60'.", new RecordItemIndex(9));
            Keyboard.Press("60");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(10));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='60') on item 'SnapXUntitled.BackLightFFW'.", repo.SnapXUntitled.BackLightFFWInfo, new RecordItemIndex(11));
                Validate.Attribute(repo.SnapXUntitled.BackLightFFWInfo, "WindowText", "60");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11));
            }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToSensor' at Center.", repo.SnapXUntitled.SwitchToSensorInfo, new RecordItemIndex(12));
            repo.SnapXUntitled.SwitchToSensor.Click();
            Delay.Milliseconds(200);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='60') on item 'SnapXUntitled.BackLightBig'.", repo.SnapXUntitled.BackLightBigInfo, new RecordItemIndex(13));
                Validate.Attribute(repo.SnapXUntitled.BackLightBigInfo, "WindowText", "60");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13));
            }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.SurfaceLightBig' at 16;14.", repo.SnapXUntitled.SurfaceLightBigInfo, new RecordItemIndex(14));
            repo.SnapXUntitled.SurfaceLightBig.DoubleClick("16;14");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '50'.", new RecordItemIndex(15));
            Keyboard.Press("50");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(16));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='50') on item 'SnapXUntitled.SurfaceLightBig'.", repo.SnapXUntitled.SurfaceLightBigInfo, new RecordItemIndex(17));
                Validate.Attribute(repo.SnapXUntitled.SurfaceLightBigInfo, "WindowText", "50");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17));
            }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToFFW' at Center.", repo.SnapXUntitled.SwitchToFFWInfo, new RecordItemIndex(18));
            repo.SnapXUntitled.SwitchToFFW.Click();
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='50') on item 'SnapXUntitled.SurfaceLightFFW'.", repo.SnapXUntitled.SurfaceLightFFWInfo, new RecordItemIndex(19));
                Validate.Attribute(repo.SnapXUntitled.SurfaceLightFFWInfo, "WindowText", "50");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19));
            }

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(20));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.SurfaceLightFFW' at Center.", repo.SnapXUntitled.SurfaceLightFFWInfo, new RecordItemIndex(21));
            repo.SnapXUntitled.SurfaceLightFFW.DoubleClick();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '30'.", new RecordItemIndex(22));
            Keyboard.Press("30");
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='30') on item 'SnapXUntitled.SurfaceLightFFW'.", repo.SnapXUntitled.SurfaceLightFFWInfo, new RecordItemIndex(23));
                Validate.Attribute(repo.SnapXUntitled.SurfaceLightFFWInfo, "WindowText", "30");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(23));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToSensor' at Center.", repo.SnapXUntitled.SwitchToSensorInfo, new RecordItemIndex(24));
            repo.SnapXUntitled.SwitchToSensor.Click();
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='30') on item 'SnapXUntitled.SurfaceLightBig'.", repo.SnapXUntitled.SurfaceLightBigInfo, new RecordItemIndex(25));
                Validate.Attribute(repo.SnapXUntitled.SurfaceLightBigInfo, "WindowText", "30");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(25));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.RingLightBig' at 13;11.", repo.SnapXUntitled.RingLightBigInfo, new RecordItemIndex(26));
            repo.SnapXUntitled.RingLightBig.DoubleClick("13;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '70'.", new RecordItemIndex(27));
            Keyboard.Press("70");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(28));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='70') on item 'SnapXUntitled.RingLightBig'.", repo.SnapXUntitled.RingLightBigInfo, new RecordItemIndex(29));
                Validate.Attribute(repo.SnapXUntitled.RingLightBigInfo, "WindowText", "70");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(29));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToFFW' at Center.", repo.SnapXUntitled.SwitchToFFWInfo, new RecordItemIndex(30));
            repo.SnapXUntitled.SwitchToFFW.Click();
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='70') on item 'SnapXUntitled.RingLightFFW'.", repo.SnapXUntitled.RingLightFFWInfo, new RecordItemIndex(31));
                Validate.Attribute(repo.SnapXUntitled.RingLightFFWInfo, "WindowText", "70");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(31));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.RingLightFFW' at 12;9.", repo.SnapXUntitled.RingLightFFWInfo, new RecordItemIndex(32));
            repo.SnapXUntitled.RingLightFFW.DoubleClick("12;9");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '20'.", new RecordItemIndex(33));
            Keyboard.Press("20");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(34));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='20') on item 'SnapXUntitled.RingLightFFW'.", repo.SnapXUntitled.RingLightFFWInfo, new RecordItemIndex(35));
                Validate.Attribute(repo.SnapXUntitled.RingLightFFWInfo, "WindowText", "20");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(35));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToSensor' at Center.", repo.SnapXUntitled.SwitchToSensorInfo, new RecordItemIndex(36));
            repo.SnapXUntitled.SwitchToSensor.Click();
            Delay.Milliseconds(200);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='20') on item 'SnapXUntitled.RingLightBig'.", repo.SnapXUntitled.RingLightBigInfo, new RecordItemIndex(37));
                Validate.Attribute(repo.SnapXUntitled.RingLightBigInfo, "WindowText", "20");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(37));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SnapXUntitled.SliderSRL' at Center.", repo.SnapXUntitled.SliderSRLInfo, new RecordItemIndex(38));
            repo.SnapXUntitled.SliderSRL.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Scroll Vertical by -2000 units.", new RecordItemIndex(39));
            Mouse.ScrollWheel(-2000);
            Delay.Milliseconds(100);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='0') on item 'SnapXUntitled.RingLightBig'.", repo.SnapXUntitled.RingLightBigInfo, new RecordItemIndex(40));
                Validate.Attribute(repo.SnapXUntitled.RingLightBigInfo, "WindowText", "0");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(40));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SnapXUntitled.SliderSurface' at Center.", repo.SnapXUntitled.SliderSurfaceInfo, new RecordItemIndex(41));
            repo.SnapXUntitled.SliderSurface.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Scroll Vertical by -2000 units.", new RecordItemIndex(42));
            Mouse.ScrollWheel(-2000);
            Delay.Milliseconds(500);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='0') on item 'SnapXUntitled.SurfaceLightBig'.", repo.SnapXUntitled.SurfaceLightBigInfo, new RecordItemIndex(43));
                Validate.Attribute(repo.SnapXUntitled.SurfaceLightBigInfo, "WindowText", "0");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(43));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SnapXUntitled.SliderBackLight' at Center.", repo.SnapXUntitled.SliderBackLightInfo, new RecordItemIndex(44));
            repo.SnapXUntitled.SliderBackLight.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Scroll Vertical by -2000 units.", new RecordItemIndex(45));
            Mouse.ScrollWheel(-2000);
            Delay.Milliseconds(500);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='0') on item 'SnapXUntitled.BackLightBig'.", repo.SnapXUntitled.BackLightBigInfo, new RecordItemIndex(46));
                Validate.Attribute(repo.SnapXUntitled.BackLightBigInfo, "WindowText", "0");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(46));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToFFW' at Center.", repo.SnapXUntitled.SwitchToFFWInfo, new RecordItemIndex(47));
            repo.SnapXUntitled.SwitchToFFW.Click();
            Delay.Milliseconds(200);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='0') on item 'SnapXUntitled.RingLightFFW'.", repo.SnapXUntitled.RingLightFFWInfo, new RecordItemIndex(48));
                Validate.Attribute(repo.SnapXUntitled.RingLightFFWInfo, "WindowText", "0");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(48));
            }
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='0') on item 'SnapXUntitled.SurfaceLightFFW'.", repo.SnapXUntitled.SurfaceLightFFWInfo, new RecordItemIndex(49));
            Validate.Attribute(repo.SnapXUntitled.SurfaceLightFFWInfo, "WindowText", "0");
            Delay.Milliseconds(100);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='0') on item 'SnapXUntitled.BackLightFFW'.", repo.SnapXUntitled.BackLightFFWInfo, new RecordItemIndex(50));
                Validate.Attribute(repo.SnapXUntitled.BackLightFFWInfo, "WindowText", "0");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(50));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.BoostFFW' at 13;11.", repo.SnapXUntitled.BoostFFWInfo, new RecordItemIndex(51));
            repo.SnapXUntitled.BoostFFW.DoubleClick("13;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '2'.", new RecordItemIndex(52));
            Keyboard.Press("2");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(53));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='2') on item 'SnapXUntitled.BoostFFW'.", repo.SnapXUntitled.BoostFFWInfo, new RecordItemIndex(54));
                Validate.Attribute(repo.SnapXUntitled.BoostFFWInfo, "WindowText", "2");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(54));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToSensor' at Center.", repo.SnapXUntitled.SwitchToSensorInfo, new RecordItemIndex(55));
            repo.SnapXUntitled.SwitchToSensor.Click();
            Delay.Milliseconds(200);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='2') on item 'SnapXUntitled.BoostBig'.", repo.SnapXUntitled.BoostBigInfo, new RecordItemIndex(56));
                Validate.Attribute(repo.SnapXUntitled.BoostBigInfo, "WindowText", "2");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(56));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'SnapXUntitled.BoostBig' at Center.", repo.SnapXUntitled.BoostBigInfo, new RecordItemIndex(57));
            repo.SnapXUntitled.BoostBig.DoubleClick();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '3'.", new RecordItemIndex(58));
            Keyboard.Press("3");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(59));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='3') on item 'SnapXUntitled.BoostBig'.", repo.SnapXUntitled.BoostBigInfo, new RecordItemIndex(60));
                Validate.Attribute(repo.SnapXUntitled.BoostBigInfo, "WindowText", "3");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(60));
            }

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToFFW' at Center.", repo.SnapXUntitled.SwitchToFFWInfo, new RecordItemIndex(61));
            repo.SnapXUntitled.SwitchToFFW.Click();
            Delay.Milliseconds(200);

            try
            {
                Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='3') on item 'SnapXUntitled.BoostFFW'.", repo.SnapXUntitled.BoostFFWInfo, new RecordItemIndex(62));
                Validate.Attribute(repo.SnapXUntitled.BoostFFWInfo, "WindowText", "3");
                Delay.Milliseconds(100);
            }
            catch (Exception ex)
            {
                Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(62));
            }
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
